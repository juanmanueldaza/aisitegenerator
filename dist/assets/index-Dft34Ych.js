import{_ as l}from"./mermaid-ThEiH_xM.js";(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))t(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&t(a)}).observe(document,{childList:!0,subtree:!0});function e(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function t(i){if(i.ep)return;i.ep=!0;const s=e(i);fetch(i.href,s)}})();class h{constructor(){this.mermaidInstance=null,this.diagramCache=new Map,this.observedElements=new Set,this.metrics={bundleSize:0,renderTime:0,memoryUsage:0,cacheHits:0,cacheMisses:0},this.observer=new IntersectionObserver(this.handleIntersection.bind(this),{rootMargin:"50px",threshold:.1}),this.setupPerformanceMonitoring()}async loadMermaid(){if(this.mermaidInstance)return this.mermaidInstance;const r=performance.now();try{const t=(await l(()=>import("./mermaid-ThEiH_xM.js").then(s=>s.b9),[])).default;t.initialize({startOnLoad:!1,theme:"default",securityLevel:"loose",fontFamily:"inherit",htmlLabels:!0,flowchart:{useMaxWidth:!0,htmlLabels:!0},themeVariables:{primaryColor:"#4f46e5",primaryTextColor:"#1f2937",primaryBorderColor:"#6366f1",lineColor:"#6b7280",sectionBkgColor:"#f3f4f6",altSectionBkgColor:"#e5e7eb",gridColor:"#e5e7eb"}}),this.mermaidInstance=t;const i=performance.now()-r;return this.metrics.bundleSize=this.estimateBundleSize(),console.log(`Mermaid loaded in ${i.toFixed(2)}ms`),this.updateMetricsDisplay(),t}catch(e){throw console.error("Failed to load Mermaid:",e),new Error("Mermaid library failed to load")}}async renderDiagram(r,e,t=null){const i=t||`mermaid-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,s=this.generateCacheKey(e),a=performance.now();if(this.diagramCache.has(s)){const n=this.diagramCache.get(s);r.innerHTML=n,this.metrics.cacheHits++;const o=performance.now()-a;this.metrics.renderTime=o,this.updateMetricsDisplay(),console.log(`Diagram rendered from cache in ${o.toFixed(2)}ms`);return}this.metrics.cacheMisses++;try{const n=await this.loadMermaid();if(!await this.validateDiagramSyntax(e))throw new Error("Invalid diagram syntax");const{svg:c}=await n.render(i,e);this.diagramCache.set(s,c),r.innerHTML=c;const m=performance.now()-a;this.metrics.renderTime=m,this.updateMetricsDisplay(),console.log(`Diagram rendered in ${m.toFixed(2)}ms`)}catch(n){console.error("Diagram rendering failed:",n),this.renderErrorFallback(r,n.message)}}observeElement(r){this.observedElements.has(r)||(this.observer.observe(r),this.observedElements.add(r))}handleIntersection(r){r.forEach(e=>{if(e.isIntersecting){const t=e.target,i=t.dataset.mermaidCode;i&&(this.renderDiagram(t,i),this.observer.unobserve(t),this.observedElements.delete(t))}})}async validateDiagramSyntax(r){try{return r.trim()?["graph","flowchart","sequenceDiagram","classDiagram","stateDiagram","journey","gantt","pie","erDiagram"].some(i=>r.toLowerCase().includes(i.toLowerCase())):!1}catch{return!1}}generateCacheKey(r){let e=0;for(let t=0;t<r.length;t++){const i=r.charCodeAt(t);e=(e<<5)-e+i,e=e&e}return e.toString()}renderErrorFallback(r,e){r.innerHTML=`
            <div class="error">
                <strong>Diagram Error:</strong> ${e}
                <br>
                <small>Please check your diagram syntax and try again.</small>
            </div>
        `}estimateBundleSize(){return 150}setupPerformanceMonitoring(){performance.memory&&setInterval(()=>{this.metrics.memoryUsage=Math.round(performance.memory.usedJSHeapSize/1024/1024),this.updateMetricsDisplay()},5e3)}updateMetricsDisplay(){const r=document.getElementById("metrics");r&&(r.innerHTML=`
                Bundle: ${this.metrics.bundleSize}KB<br>
                Render: ${this.metrics.renderTime.toFixed(1)}ms<br>
                Memory: ${this.metrics.memoryUsage}MB<br>
                Cache: ${this.metrics.cacheHits}/${this.metrics.cacheHits+this.metrics.cacheMisses}
            `)}clearCache(){this.diagramCache.clear(),this.metrics.cacheHits=0,this.metrics.cacheMisses=0,console.log("Diagram cache cleared")}getMetrics(){return{...this.metrics}}}class u{constructor(){this.mermaidManager=new h,this.debounceTimer=null,this.editor=null,this.previewContent=null,this.init()}async init(){if(this.editor=document.getElementById("editor"),this.previewContent=document.getElementById("preview-content"),!this.editor||!this.previewContent){console.error("Required DOM elements not found");return}this.setupEventListeners(),this.updatePreview(),console.log("AI Site Generator initialized with optimized Mermaid support")}setupEventListeners(){this.editor.addEventListener("input",()=>{clearTimeout(this.debounceTimer),this.debounceTimer=setTimeout(()=>{this.updatePreview()},300)}),this.editor.addEventListener("keydown",r=>{r.ctrlKey&&r.key==="s"&&(r.preventDefault(),this.updatePreview())}),window.addEventListener("resize",this.debounce(()=>{this.refreshVisibleDiagrams()},250))}async updatePreview(){const r=this.editor.value;if(!r.trim()){this.previewContent.innerHTML='<div class="loading">Start typing to see preview...</div>';return}try{const e=await this.processContent(r);this.previewContent.innerHTML=e,await this.renderMermaidDiagrams()}catch(e){console.error("Preview update failed:",e),this.previewContent.innerHTML=`
                <div class="error">
                    <strong>Preview Error:</strong> ${e.message}
                </div>
            `}}async processContent(r){let e=r;return e=this.convertBasicMarkdown(e),e=await this.processMermaidBlocks(e),e}convertBasicMarkdown(r){return`<p>${r.replace(/### (.*)/g,"<h3>$1</h3>").replace(/## (.*)/g,"<h2>$1</h2>").replace(/# (.*)/g,"<h1>$1</h1>").replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\n\n/g,"</p><p>").replace(/\n/g,"<br>")}</p>`}async processMermaidBlocks(r){const e=/```mermaid\n([\s\S]*?)\n```/g,t=[...r.matchAll(e)];if(t.length===0)return r;let i=r;for(const s of t){const a=s[0],n=s[1].trim(),c=`
                <div class="mermaid-container">
                    <div id="${`mermaid-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}" 
                         class="mermaid-diagram" 
                         data-mermaid-code="${this.escapeHtml(n)}">
                        <div class="loading">Loading diagram...</div>
                    </div>
                </div>
            `;i=i.replace(a,c)}return i}async renderMermaidDiagrams(){const r=this.previewContent.querySelectorAll(".mermaid-diagram");for(const e of r){const t=e.dataset.mermaidCode;t&&(this.isInViewport(e)?await this.mermaidManager.renderDiagram(e,t,e.id):this.mermaidManager.observeElement(e))}}refreshVisibleDiagrams(){this.previewContent.querySelectorAll(".mermaid-diagram").forEach(e=>{if(this.isInViewport(e)&&e.innerHTML.includes("Loading diagram...")){const t=e.dataset.mermaidCode;t&&this.mermaidManager.renderDiagram(e,t,e.id)}})}isInViewport(r){const e=r.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}escapeHtml(r){const e=document.createElement("div");return e.textContent=r,e.innerHTML}debounce(r,e){let t;return function(...s){const a=()=>{clearTimeout(t),r.apply(this,s)};clearTimeout(t),t=setTimeout(a,e)}}getPerformanceMetrics(){return this.mermaidManager.getMetrics()}clearDiagramCache(){this.mermaidManager.clearCache()}}document.addEventListener("DOMContentLoaded",()=>{window.app=new u});
//# sourceMappingURL=index-Dft34Ych.js.map
