/**
 * Repository Creator Component
 * Handles creating GitHub repositories and deploying websites
 */

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { Toast } from '@/components/ui';
import { useGitHub } from '../../hooks/useGitHub';
import { useToast } from '../../hooks';
import './RepositoryCreator.css';
import { normalizeGitHubError } from '@/utils/github-errors';
import { useSiteStore } from '@/store/siteStore';
import { slugify } from '@/utils/string';

interface RepositoryCreatorProps {
  content: string;
  onDeploymentComplete?: (url: string) => void;
  className?: string;
}

const RepositoryCreator: React.FC<RepositoryCreatorProps> = ({
  content,
  onDeploymentComplete,
  className = '',
}) => {
  const { isAuthenticated, user, createRepository, deployToPages } = useGitHub();
  const store = useSiteStore();
  const [repoName, setRepoName] = useState(store.projectName || '');
  const [description, setDescription] = useState('');
  const [isDeploying, setIsDeploying] = useState(false);
  const [deploymentStatus, setDeploymentStatus] = useState<string | null>(null);
  const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);
  const [updateReadme, setUpdateReadme] = useState(false);

  // URL-safe repo name used in API calls and links
  const safeRepoName = useMemo(() => slugify(repoName), [repoName]);

  const { toast, showToast } = useToast();

  const handleRepoBlur = useCallback(() => {
    const slug = safeRepoName;
    if (repoName && repoName !== slug) {
      setRepoName(slug);
      showToast(`Repository name sanitized to "${slug}"`);
    }
  }, [repoName, safeRepoName, showToast]);

  const handleDeploy = async () => {
    if (!safeRepoName.trim() || !content.trim()) {
      setDeploymentStatus('Please provide a repository name and content');
      return;
    }

    setIsDeploying(true);
    setDeploymentStatus('Creating repository...');

    try {
      // Try to create repository, but tolerate "already exists" to allow redeploys
      try {
        await createRepository({
          name: safeRepoName.trim(),
          description: description.trim() || `Website generated by AI Site Generator`,
          private: false,
          auto_init: true,
          has_issues: true,
          has_projects: false,
          has_wiki: false,
        });
      } catch (e) {
        const msg = e instanceof Error ? e.message : String(e);
        if (/already exists/i.test(msg) || /name already exists/i.test(msg)) {
          setDeploymentStatus('Repository exists. Continuing with deployment...');
        } else {
          throw e;
        }
      }

      setDeploymentStatus('Preparing files...');
      // Generate index.html using the same secure pipeline as LivePreview
      const { generatePreviewHTMLAsync } = await import('../../utils/content');
      const html = await generatePreviewHTMLAsync(content);

      setDeploymentStatus('Uploading files...');
      const files = [
        {
          path: 'index.html',
          content: html,
          message: 'Add generated website content',
        },
      ];

      if (updateReadme) {
        files.push({
          path: 'README.md',
          content: `# ${repoName}\n\n${description || 'Website generated by AI Site Generator.'}\n\nGenerated with AI Site Generator.`,
          message: 'Update README',
        });
      }

      setDeploymentStatus('Deploying to GitHub Pages...');
      const url = await deployToPages(safeRepoName, files);

      setDeploymentUrl(url);
      setDeploymentStatus('Deployment successful!');
      showToast('Deployment successful!');

      onDeploymentComplete?.(url);
    } catch (error) {
      console.error('Deployment error:', error);
      const norm = normalizeGitHubError(error instanceof Error ? error : new Error(String(error)));
      const msg =
        norm.code === 'rate_limited' && norm.retryAfterMs
          ? `Rate limited. Retry after ${Math.ceil(norm.retryAfterMs / 1000)}s.`
          : norm.message || 'Deployment failed. Please try again.';
      setDeploymentStatus(`Deployment failed: ${msg}`);
      showToast(`Deployment failed: ${msg}`);
    } finally {
      setIsDeploying(false);
    }
  };

  // (HTML generation moved to utils/content via generatePreviewHTMLAsync)

  // Keep repo name in sync with onboarding project name when user hasn't typed yet
  useEffect(() => {
    if (!repoName && store.projectName) setRepoName(store.projectName);
  }, [store.projectName, repoName]);

  const resetForm = () => {
    setRepoName('');
    setDescription('');
    setDeploymentStatus(null);
    setDeploymentUrl(null);
  };

  if (!isAuthenticated) {
    return (
      <div className={`repository-creator unauthenticated ${className}`}>
        <Toast message={toast} visible={!!toast} />
        <div className="auth-required">
          <h3>Authentication Required</h3>
          <p>Please sign in with GitHub to deploy your website.</p>
        </div>
      </div>
    );
  }

  if (deploymentUrl) {
    return (
      <div className={`repository-creator success ${className}`}>
        <Toast message={toast} visible={!!toast} />
        <div className="deployment-success">
          <div className="success-icon">ðŸŽ‰</div>
          <h3>Deployment Successful!</h3>
          <p>Your website has been deployed to GitHub Pages.</p>
          <div className="deployment-links">
            <a
              href={deploymentUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="btn btn-primary"
            >
              View Website
            </a>
            <a
              href={`https://github.com/${user?.login}/${safeRepoName}`}
              target="_blank"
              rel="noopener noreferrer"
              className="btn btn-secondary"
            >
              View Repository
            </a>
          </div>
          <button onClick={resetForm} className="btn btn-secondary btn-small">
            Deploy Another Site
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`repository-creator ${className}`}>
      <Toast message={toast} visible={!!toast} />
      <div className="creator-header">
        <h3>Deploy to GitHub Pages</h3>
        <p>Create a repository and deploy your website</p>
      </div>

      <div className="creator-form">
        <div className="form-group">
          <label htmlFor="repo-name">Repository Name *</label>
          <input
            id="repo-name"
            type="text"
            value={repoName}
            onChange={(e) => setRepoName(e.target.value)}
            onBlur={handleRepoBlur}
            placeholder="my-awesome-website"
            className="form-input"
            disabled={isDeploying}
          />
          <small className="form-help">
            Will be available at: {user?.login}.github.io/{safeRepoName || 'repository-name'}
          </small>
          {repoName && repoName !== safeRepoName && (
            <small className="form-help">Final repository name: {safeRepoName}</small>
          )}
        </div>

        <div className="form-group">
          <label htmlFor="repo-description">Description</label>
          <input
            id="repo-description"
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="A brief description of your website"
            className="form-input"
            disabled={isDeploying}
          />
        </div>

        <div className="form-group" style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
          <input
            id="update-readme"
            type="checkbox"
            checked={updateReadme}
            onChange={(e) => setUpdateReadme(e.target.checked)}
            disabled={isDeploying}
          />
          <label htmlFor="update-readme" style={{ margin: 0 }}>
            Update README.md (create or update with project name and description)
          </label>
        </div>

        {deploymentStatus && (
          <div
            className={`deployment-status ${deploymentStatus.includes('failed') ? 'error' : 'info'}`}
          >
            {deploymentStatus}
          </div>
        )}

        <div className="form-actions">
          <button
            onClick={handleDeploy}
            disabled={isDeploying || !safeRepoName.trim()}
            className="btn btn-primary"
          >
            {isDeploying ? (
              <>
                <span className="loading-spinner"></span>
                Deploying...
              </>
            ) : (
              <>ðŸš€ Deploy Website</>
            )}
          </button>
          {deploymentStatus && deploymentStatus.includes('failed') && (
            <button
              onClick={handleDeploy}
              disabled={isDeploying}
              className="btn btn-secondary"
              title="Retry deployment"
              style={{ marginLeft: 8 }}
            >
              Retry
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default RepositoryCreator;
