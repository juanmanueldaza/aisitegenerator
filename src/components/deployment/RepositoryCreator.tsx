/**
 * Repository Creator Component
 * Handles creating GitHub repositories and deploying websites
 */

import React, { useState } from 'react';
import { useGitHub } from '../../hooks/useGitHub';
import './RepositoryCreator.css';

interface RepositoryCreatorProps {
  content: string;
  onDeploymentComplete?: (url: string) => void;
  className?: string;
}

const RepositoryCreator: React.FC<RepositoryCreatorProps> = ({
  content,
  onDeploymentComplete,
  className = '',
}) => {
  const { isAuthenticated, user, createRepository, deployToPages } = useGitHub();
  const [repoName, setRepoName] = useState('');
  const [description, setDescription] = useState('');
  const [isDeploying, setIsDeploying] = useState(false);
  const [deploymentStatus, setDeploymentStatus] = useState<string | null>(null);
  const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);

  const handleDeploy = async () => {
    if (!repoName.trim() || !content.trim()) {
      setDeploymentStatus('Please provide a repository name and content');
      return;
    }

    setIsDeploying(true);
    setDeploymentStatus('Creating repository...');

    try {
      // Create repository
      await createRepository({
        name: repoName.trim(),
        description: description.trim() || `Website generated by AI Site Generator`,
        private: false,
        auto_init: true,
        has_issues: true,
        has_projects: false,
        has_wiki: false,
      });

      setDeploymentStatus('Uploading files...');

      // Prepare files for deployment
      const files = [
        {
          path: 'index.html',
          content: generateHTMLFromMarkdown(content),
          message: 'Add generated website content',
        },
        {
          path: 'README.md',
          content: `# ${repoName}\n\n${description}\n\nGenerated with AI Site Generator.`,
          message: 'Add README',
        },
      ];

      // Deploy to GitHub Pages
      setDeploymentStatus('Deploying to GitHub Pages...');
      const url = await deployToPages(repoName, files);

      setDeploymentUrl(url);
      setDeploymentStatus('Deployment successful!');

      if (onDeploymentComplete) {
        onDeploymentComplete(url);
      }
    } catch (error) {
      console.error('Deployment error:', error);
      setDeploymentStatus(
        error instanceof Error
          ? `Deployment failed: ${error.message}`
          : 'Deployment failed. Please try again.'
      );
    } finally {
      setIsDeploying(false);
    }
  };

  const generateHTMLFromMarkdown = (markdown: string): string => {
    // Simple markdown to HTML conversion (replace with proper markdown parser in production)
    const html = markdown
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
      .replace(/\*(.*)\*/gim, '<em>$1</em>')
      .replace(/\n/gim, '<br>');

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${repoName || 'My Website'}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            color: #333;
        }
        h1, h2, h3 { color: #2c3e50; }
        h1 { border-bottom: 2px solid #3498db; padding-bottom: 0.5rem; }
        code {
            background: #f4f4f4;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        }
        pre {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 5px;
            overflow-x: auto;
        }
        blockquote {
            border-left: 4px solid #3498db;
            margin: 0;
            padding-left: 1rem;
            color: #666;
        }
    </style>
</head>
<body>
    ${html}
    <footer style="margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #eee; text-align: center; color: #666;">
        <p>Generated with <a href="https://github.com/juanmanueldaza/aisitegenerator" target="_blank">AI Site Generator</a></p>
    </footer>
</body>
</html>`;
  };

  const resetForm = () => {
    setRepoName('');
    setDescription('');
    setDeploymentStatus(null);
    setDeploymentUrl(null);
  };

  if (!isAuthenticated) {
    return (
      <div className={`repository-creator unauthenticated ${className}`}>
        <div className="auth-required">
          <h3>Authentication Required</h3>
          <p>Please sign in with GitHub to deploy your website.</p>
        </div>
      </div>
    );
  }

  if (deploymentUrl) {
    return (
      <div className={`repository-creator success ${className}`}>
        <div className="deployment-success">
          <div className="success-icon">ðŸŽ‰</div>
          <h3>Deployment Successful!</h3>
          <p>Your website has been deployed to GitHub Pages.</p>
          <div className="deployment-links">
            <a
              href={deploymentUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="btn btn-primary"
            >
              View Website
            </a>
            <a
              href={`https://github.com/${user?.login}/${repoName}`}
              target="_blank"
              rel="noopener noreferrer"
              className="btn btn-secondary"
            >
              View Repository
            </a>
          </div>
          <button onClick={resetForm} className="btn btn-secondary btn-small">
            Deploy Another Site
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`repository-creator ${className}`}>
      <div className="creator-header">
        <h3>Deploy to GitHub Pages</h3>
        <p>Create a repository and deploy your website</p>
      </div>

      <div className="creator-form">
        <div className="form-group">
          <label htmlFor="repo-name">Repository Name *</label>
          <input
            id="repo-name"
            type="text"
            value={repoName}
            onChange={(e) => setRepoName(e.target.value)}
            placeholder="my-awesome-website"
            className="form-input"
            disabled={isDeploying}
          />
          <small className="form-help">
            Will be available at: {user?.login}.github.io/{repoName || 'repository-name'}
          </small>
        </div>

        <div className="form-group">
          <label htmlFor="repo-description">Description</label>
          <input
            id="repo-description"
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="A brief description of your website"
            className="form-input"
            disabled={isDeploying}
          />
        </div>

        {deploymentStatus && (
          <div
            className={`deployment-status ${deploymentStatus.includes('failed') ? 'error' : 'info'}`}
          >
            {deploymentStatus}
          </div>
        )}

        <div className="form-actions">
          <button
            onClick={handleDeploy}
            disabled={isDeploying || !repoName.trim()}
            className="btn btn-primary"
          >
            {isDeploying ? (
              <>
                <span className="loading-spinner"></span>
                Deploying...
              </>
            ) : (
              <>ðŸš€ Deploy Website</>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default RepositoryCreator;
