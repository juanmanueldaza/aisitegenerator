{"version":3,"mappings":"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","names":["MermaidManager","startTime","mermaid","__vitePreload","n","loadTime","error","element","diagramCode","diagramId","id","cacheKey","cachedSvg","renderTime","svg","entries","entry","type","hash","i","char","errorMessage","metricsElement","AISiteGenerator","e","content","processedContent","processed","mermaidRegex","matches","match","fullMatch","placeholder","diagramElements","rect","text","div","func","wait","timeout","args","later"],"ignoreList":[],"sources":["../../src/mermaid-manager.js","../../src/main.js"],"sourcesContent":["/**\n * Optimized Mermaid Loader with Performance Monitoring\n * \n * Features:\n * - Dynamic imports for lazy loading\n * - Tree shaking support\n * - Intersection Observer for viewport-based loading\n * - Diagram caching and memoization\n * - Performance metrics tracking\n * - Error handling and fallbacks\n */\n\nclass MermaidManager {\n    constructor() {\n        this.mermaidInstance = null;\n        this.diagramCache = new Map();\n        this.observedElements = new Set();\n        this.metrics = {\n            bundleSize: 0,\n            renderTime: 0,\n            memoryUsage: 0,\n            cacheHits: 0,\n            cacheMisses: 0\n        };\n        \n        // Initialize Intersection Observer for lazy loading\n        this.observer = new IntersectionObserver(\n            this.handleIntersection.bind(this),\n            { \n                rootMargin: '50px',\n                threshold: 0.1\n            }\n        );\n        \n        this.setupPerformanceMonitoring();\n    }\n    \n    /**\n     * Lazily load Mermaid library only when needed\n     */\n    async loadMermaid() {\n        if (this.mermaidInstance) {\n            return this.mermaidInstance;\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            // Dynamic import for code splitting and lazy loading\n            const mermaidModule = await import('mermaid');\n            const mermaid = mermaidModule.default;\n            \n            // Configure Mermaid with optimized settings\n            mermaid.initialize({\n                startOnLoad: false, // Manual control for better performance\n                theme: 'default',\n                securityLevel: 'loose',\n                fontFamily: 'inherit',\n                // Optimize rendering performance\n                htmlLabels: true,\n                flowchart: {\n                    useMaxWidth: true,\n                    htmlLabels: true\n                },\n                // Enable only commonly used diagram types for smaller bundle\n                themeVariables: {\n                    primaryColor: '#4f46e5',\n                    primaryTextColor: '#1f2937',\n                    primaryBorderColor: '#6366f1',\n                    lineColor: '#6b7280',\n                    sectionBkgColor: '#f3f4f6',\n                    altSectionBkgColor: '#e5e7eb',\n                    gridColor: '#e5e7eb'\n                }\n            });\n            \n            this.mermaidInstance = mermaid;\n            \n            const loadTime = performance.now() - startTime;\n            this.metrics.bundleSize = this.estimateBundleSize();\n            \n            console.log(`Mermaid loaded in ${loadTime.toFixed(2)}ms`);\n            this.updateMetricsDisplay();\n            \n            return mermaid;\n        } catch (error) {\n            console.error('Failed to load Mermaid:', error);\n            throw new Error('Mermaid library failed to load');\n        }\n    }\n    \n    /**\n     * Render a Mermaid diagram with caching and performance optimization\n     */\n    async renderDiagram(element, diagramCode, diagramId = null) {\n        const id = diagramId || `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const cacheKey = this.generateCacheKey(diagramCode);\n        \n        const startTime = performance.now();\n        \n        // Check cache first\n        if (this.diagramCache.has(cacheKey)) {\n            const cachedSvg = this.diagramCache.get(cacheKey);\n            element.innerHTML = cachedSvg;\n            this.metrics.cacheHits++;\n            \n            const renderTime = performance.now() - startTime;\n            this.metrics.renderTime = renderTime;\n            this.updateMetricsDisplay();\n            \n            console.log(`Diagram rendered from cache in ${renderTime.toFixed(2)}ms`);\n            return;\n        }\n        \n        this.metrics.cacheMisses++;\n        \n        try {\n            // Load Mermaid library if not already loaded\n            const mermaid = await this.loadMermaid();\n            \n            // Validate diagram syntax\n            const isValid = await this.validateDiagramSyntax(diagramCode);\n            if (!isValid) {\n                throw new Error('Invalid diagram syntax');\n            }\n            \n            // Render the diagram\n            const { svg } = await mermaid.render(id, diagramCode);\n            \n            // Cache the rendered SVG\n            this.diagramCache.set(cacheKey, svg);\n            \n            // Apply the rendered diagram\n            element.innerHTML = svg;\n            \n            const renderTime = performance.now() - startTime;\n            this.metrics.renderTime = renderTime;\n            this.updateMetricsDisplay();\n            \n            console.log(`Diagram rendered in ${renderTime.toFixed(2)}ms`);\n            \n        } catch (error) {\n            console.error('Diagram rendering failed:', error);\n            this.renderErrorFallback(element, error.message);\n        }\n    }\n    \n    /**\n     * Observe elements for lazy loading\n     */\n    observeElement(element) {\n        if (!this.observedElements.has(element)) {\n            this.observer.observe(element);\n            this.observedElements.add(element);\n        }\n    }\n    \n    /**\n     * Handle intersection for lazy loading\n     */\n    handleIntersection(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const element = entry.target;\n                const diagramCode = element.dataset.mermaidCode;\n                \n                if (diagramCode) {\n                    this.renderDiagram(element, diagramCode);\n                    this.observer.unobserve(element);\n                    this.observedElements.delete(element);\n                }\n            }\n        });\n    }\n    \n    /**\n     * Validate diagram syntax before rendering\n     */\n    async validateDiagramSyntax(diagramCode) {\n        try {\n            // Basic syntax validation\n            if (!diagramCode.trim()) return false;\n            \n            // Check for common diagram type keywords\n            const validTypes = [\n                'graph', 'flowchart', 'sequenceDiagram', 'classDiagram',\n                'stateDiagram', 'journey', 'gantt', 'pie', 'erDiagram'\n            ];\n            \n            const hasValidType = validTypes.some(type => \n                diagramCode.toLowerCase().includes(type.toLowerCase())\n            );\n            \n            return hasValidType;\n        } catch (error) {\n            return false;\n        }\n    }\n    \n    /**\n     * Generate cache key for diagrams\n     */\n    generateCacheKey(diagramCode) {\n        // Simple hash function for cache key\n        let hash = 0;\n        for (let i = 0; i < diagramCode.length; i++) {\n            const char = diagramCode.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return hash.toString();\n    }\n    \n    /**\n     * Render error fallback\n     */\n    renderErrorFallback(element, errorMessage) {\n        element.innerHTML = `\n            <div class=\"error\">\n                <strong>Diagram Error:</strong> ${errorMessage}\n                <br>\n                <small>Please check your diagram syntax and try again.</small>\n            </div>\n        `;\n    }\n    \n    /**\n     * Estimate bundle size impact\n     */\n    estimateBundleSize() {\n        // Rough estimation based on Mermaid library size\n        return 150; // KB - typical Mermaid bundle size with tree shaking\n    }\n    \n    /**\n     * Setup performance monitoring\n     */\n    setupPerformanceMonitoring() {\n        // Monitor memory usage\n        if (performance.memory) {\n            setInterval(() => {\n                this.metrics.memoryUsage = Math.round(\n                    performance.memory.usedJSHeapSize / 1024 / 1024\n                );\n                this.updateMetricsDisplay();\n            }, 5000);\n        }\n    }\n    \n    /**\n     * Update metrics display\n     */\n    updateMetricsDisplay() {\n        const metricsElement = document.getElementById('metrics');\n        if (metricsElement) {\n            metricsElement.innerHTML = `\n                Bundle: ${this.metrics.bundleSize}KB<br>\n                Render: ${this.metrics.renderTime.toFixed(1)}ms<br>\n                Memory: ${this.metrics.memoryUsage}MB<br>\n                Cache: ${this.metrics.cacheHits}/${this.metrics.cacheHits + this.metrics.cacheMisses}\n            `;\n        }\n    }\n    \n    /**\n     * Clear cache to manage memory\n     */\n    clearCache() {\n        this.diagramCache.clear();\n        this.metrics.cacheHits = 0;\n        this.metrics.cacheMisses = 0;\n        console.log('Diagram cache cleared');\n    }\n    \n    /**\n     * Get performance metrics\n     */\n    getMetrics() {\n        return { ...this.metrics };\n    }\n}\n\nexport default MermaidManager;","/**\n * Main application entry point\n * Integrates optimized Mermaid rendering with live preview\n */\n\nimport MermaidManager from './mermaid-manager.js';\n\nclass AISiteGenerator {\n    constructor() {\n        this.mermaidManager = new MermaidManager();\n        this.debounceTimer = null;\n        this.editor = null;\n        this.previewContent = null;\n        \n        this.init();\n    }\n    \n    async init() {\n        // Get DOM elements\n        this.editor = document.getElementById('editor');\n        this.previewContent = document.getElementById('preview-content');\n        \n        if (!this.editor || !this.previewContent) {\n            console.error('Required DOM elements not found');\n            return;\n        }\n        \n        // Setup event listeners\n        this.setupEventListeners();\n        \n        // Initial render\n        this.updatePreview();\n        \n        console.log('AI Site Generator initialized with optimized Mermaid support');\n    }\n    \n    setupEventListeners() {\n        // Debounced input handling for performance\n        this.editor.addEventListener('input', () => {\n            clearTimeout(this.debounceTimer);\n            this.debounceTimer = setTimeout(() => {\n                this.updatePreview();\n            }, 300); // 300ms debounce for optimal UX\n        });\n        \n        // Keyboard shortcuts\n        this.editor.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key === 's') {\n                e.preventDefault();\n                this.updatePreview();\n            }\n        });\n        \n        // Handle window resize for responsive diagrams\n        window.addEventListener('resize', this.debounce(() => {\n            this.refreshVisibleDiagrams();\n        }, 250));\n    }\n    \n    async updatePreview() {\n        const content = this.editor.value;\n        \n        if (!content.trim()) {\n            this.previewContent.innerHTML = '<div class=\"loading\">Start typing to see preview...</div>';\n            return;\n        }\n        \n        try {\n            const processedContent = await this.processContent(content);\n            this.previewContent.innerHTML = processedContent;\n            \n            // Render any Mermaid diagrams\n            await this.renderMermaidDiagrams();\n            \n        } catch (error) {\n            console.error('Preview update failed:', error);\n            this.previewContent.innerHTML = `\n                <div class=\"error\">\n                    <strong>Preview Error:</strong> ${error.message}\n                </div>\n            `;\n        }\n    }\n    \n    async processContent(content) {\n        // Process markdown-style content with Mermaid blocks\n        let processed = content;\n        \n        // Convert basic markdown\n        processed = this.convertBasicMarkdown(processed);\n        \n        // Process Mermaid code blocks\n        processed = await this.processMermaidBlocks(processed);\n        \n        return processed;\n    }\n    \n    convertBasicMarkdown(content) {\n        // Basic markdown conversion\n        let html = content\n            .replace(/### (.*)/g, '<h3>$1</h3>')\n            .replace(/## (.*)/g, '<h2>$1</h2>')\n            .replace(/# (.*)/g, '<h1>$1</h1>')\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n            .replace(/\\n\\n/g, '</p><p>')\n            .replace(/\\n/g, '<br>');\n        \n        return `<p>${html}</p>`;\n    }\n    \n    async processMermaidBlocks(content) {\n        // Find Mermaid code blocks\n        const mermaidRegex = /```mermaid\\n([\\s\\S]*?)\\n```/g;\n        const matches = [...content.matchAll(mermaidRegex)];\n        \n        if (matches.length === 0) {\n            return content;\n        }\n        \n        let processed = content;\n        \n        for (const match of matches) {\n            const fullMatch = match[0];\n            const diagramCode = match[1].trim();\n            const diagramId = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n            \n            // Create placeholder div with data attribute for lazy loading\n            const placeholder = `\n                <div class=\"mermaid-container\">\n                    <div id=\"${diagramId}\" \n                         class=\"mermaid-diagram\" \n                         data-mermaid-code=\"${this.escapeHtml(diagramCode)}\">\n                        <div class=\"loading\">Loading diagram...</div>\n                    </div>\n                </div>\n            `;\n            \n            processed = processed.replace(fullMatch, placeholder);\n        }\n        \n        return processed;\n    }\n    \n    async renderMermaidDiagrams() {\n        const diagramElements = this.previewContent.querySelectorAll('.mermaid-diagram');\n        \n        for (const element of diagramElements) {\n            const diagramCode = element.dataset.mermaidCode;\n            \n            if (diagramCode) {\n                // Check if element is in viewport for immediate rendering\n                if (this.isInViewport(element)) {\n                    await this.mermaidManager.renderDiagram(element, diagramCode, element.id);\n                } else {\n                    // Use lazy loading for off-screen diagrams\n                    this.mermaidManager.observeElement(element);\n                }\n            }\n        }\n    }\n    \n    refreshVisibleDiagrams() {\n        const diagramElements = this.previewContent.querySelectorAll('.mermaid-diagram');\n        \n        diagramElements.forEach(element => {\n            if (this.isInViewport(element) && element.innerHTML.includes('Loading diagram...')) {\n                const diagramCode = element.dataset.mermaidCode;\n                if (diagramCode) {\n                    this.mermaidManager.renderDiagram(element, diagramCode, element.id);\n                }\n            }\n        });\n    }\n    \n    isInViewport(element) {\n        const rect = element.getBoundingClientRect();\n        return (\n            rect.top >= 0 &&\n            rect.left >= 0 &&\n            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n        );\n    }\n    \n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func.apply(this, args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    \n    // Public API for performance monitoring\n    getPerformanceMetrics() {\n        return this.mermaidManager.getMetrics();\n    }\n    \n    clearDiagramCache() {\n        this.mermaidManager.clearCache();\n    }\n}\n\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = new AISiteGenerator();\n});\n\n// Export for testing and external usage\nexport default AISiteGenerator;"],"file":"assets/index-Dft34Ych.js"}